require 'rails_helper'

# This file was generated by 'rails g scaffold' but has been lovingly
# edited. I'll keep this comment:
#
# "Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem."

RSpec.describe Api::V1::CharitiesController, type: :controller do
  include Devise::Test::ControllerHelpers

  let(:user) { create :user }
  let(:admin) { create :admin }

  let(:valid_attributes) {
    {name: "a charity"}
  }

  let(:invalid_attributes) {
    {name: ""}
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # CharitiesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "requires you to be logged in and confirmed" do
      get :index, params: {}, session: valid_session
      expect(response).to redirect_to(new_user_session_url)
    end
    it "returns a success response if you are logged in as non-admin" do
      sign_in user
      get :index, params: {}, session: valid_session
      expect(response).to be_success
    end
    it "returns a success response if you are logged in as admin -- HTML" do
      sign_in admin
      [:html, :json].each do |format|
        get :index, params: {}, session: valid_session, format: format
        expect(response).to be_success
        expect(response.status).to eq 200
      end
    end
  end

  describe "GET #show" do
    let!(:charity) { create :charity }

    context "returns a success response if you are logged in" do
      before { sign_in user }

      specify "html" do
        get :show, params: {id: charity.to_param}, session: valid_session
        expect(response).to be_success
        expect(response.status).to eq 200
      end

      specify "json" do
        get :show, params: {id: charity.to_param}, session: valid_session, format: :json
        expect(response).to be_success
        expect(response.status).to eq 200
      end
    end

    it "302s if you haven't confirmed your email address" do
      user.update_attributes!(confirmed_at: nil)
      sign_in user
      get :show, params: {id: charity.to_param}, session: valid_session
      expect(response).to redirect_to(new_user_session_url)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Charity" do
        sign_in admin
        expect {
          post :create, params: {charity: valid_attributes}, session: valid_session
        }.to change(Charity, :count).by(1)
      end

      it "does not create a new Charity unless you are an admin" do
        sign_in user
        expect {
          post :create, params: {charity: valid_attributes}, session: valid_session
          expect(flash[:alert]).to eq "You are not authorized to access this page."
          expect(response).to redirect_to(root_url)
        }.to change(Charity, :count).by(0)
      end

      it "redirects to the created charity" do
        sign_in admin
        post :create, params: {charity: valid_attributes}, session: valid_session
        expect(response).to redirect_to(api_charity_url(Charity.last))
      end
    end

    context "with invalid params" do
      it "for admins it 422s" do
        sign_in admin
        post :create, params: {charity: invalid_attributes}, session: valid_session
        expect(response.status).to eq 422
      end
      it "for non-admins redirects" do
        sign_in user
        post :create, params: {charity: invalid_attributes}, session: valid_session
        expect(flash[:alert]).to eq "You are not authorized to access this page."
        expect(response).to redirect_to(root_url)
      end
    end
  end

  describe "PUT #update" do
    let!(:charity) { create :charity }

    context "with valid params" do
      let(:new_attributes) {
        {
          name: "American Red Cross",
          ein: "new ein",
          description: "well-known",
          score_overall: 66.2,
          stars_overall: 99,
          website: "givegivegave.org",
        }
      }

      it "updates the requested charity" do
        sign_in admin
        put :update, params: {id: charity.to_param, charity: new_attributes}, session: valid_session
        charity.reload
        new_attributes.each_key do |attr|
          expect(charity.public_send(attr)).to eq new_attributes[attr]
        end
      end

      it "redirects for non-admins" do
        sign_in user
        put :update, params: {id: charity.to_param, charity: new_attributes}, session: valid_session
        charity.reload
        expect(charity.name).not_to eq new_attributes[:name]
        expect(flash[:alert]).to eq "You are not authorized to access this page."
        expect(response).to redirect_to(root_url)
      end

      context "for admin" do
        it "format html: redirects to the charity" do
          sign_in admin
          put :update, params: {id: charity.to_param, charity: valid_attributes}, session: valid_session
          expect(response).to redirect_to(api_charity_url(charity))
        end

        it "format json: 204s" do
          sign_in admin
          put :update, params: {id: charity.to_param, charity: valid_attributes}, session: valid_session, format: :json
          # TODO(chandler37): this is incorrect. Why? Since we don't know, we
          # test this in the request spec
          # spec/requests/api/v1/charities_spec.rb instead.
          expect(response.body).to eq ""
          expect(response.status).to eq 200
        end
      end
    end

    context "with invalid params" do
      it "422s" do
        sign_in admin
        put :update, params: {id: charity.to_param, charity: invalid_attributes}, session: valid_session
        expect(response.status).to eq 422
        expect(response.body).to eq "{\"name\":[\"can't be blank\"]}"
      end
    end
  end

  describe "DELETE #destroy" do
    let!(:charity) { create :charity }

    context "for admin" do
      subject { delete :destroy, params: {id: charity.to_param}, session: valid_session }

      it "destroys the requested charity" do
        sign_in admin
        expect { subject }.to change(Charity, :count).by(-1)
      end

      it "html: redirects to the charities list" do
        sign_in admin
        subject
        expect(response).to redirect_to(api_charities_url)
      end

      it "json: 204s" do
        sign_in admin
        expect {
          delete :destroy, params: {id: charity.to_param}, session: valid_session, format: :json
        }.to change(Charity, :count).by(-1)
        expect(response.status).to eq 204
        expect(response.parsed_body).to eq ""
      end
    end

    it "rejects non-admin users" do
      sign_in user
      delete :destroy, params: {id: charity.to_param}, session: valid_session
      expect(response).to redirect_to(root_url)
    end

    it "rejects the unauthenticated" do
      delete :destroy, params: {id: charity.to_param}, session: valid_session
      expect(response).to redirect_to(new_user_session_url)
    end
  end

end
